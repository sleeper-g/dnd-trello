{"version":3,"file":"main.js","mappings":"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","sources":["webpack://dnd-trello/./src/js/Card.js","webpack://dnd-trello/./src/js/Board.js","webpack://dnd-trello/./src/js/app.js","webpack://dnd-trello/./src/index.js"],"sourcesContent":["export default class Card {\n  constructor(parent, value) {\n    this.parent = parent;\n    this.value = value;\n  }\n  addTask() {\n    const newEl = document.createElement(\"li\");\n    newEl.classList.add(\"task\");\n    newEl.textContent = this.value;\n    this.parent.appendChild(newEl);\n  }\n}\n","import Card from \"./Card\";\n\nexport default class Board {\n  constructor() {\n    this.board = null;\n    this.taskTodo = [];\n    this.taskProgess = [];\n    this.taskDone = [];\n    this.tasks = [this.taskTodo, this.taskProgess, this.taskDone];\n    this.addInput = this.addInput.bind(this);\n    this.addNewTask = this.addNewTask.bind(this);\n    this.closeForm = this.closeForm.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n  }\n  init() {\n    this.drawBoard();\n    const addList = this.board.querySelectorAll(\".column-add\");\n    [...addList].forEach((el) => el.addEventListener(\"click\", this.addInput));\n  }\n  drawBoard() {\n    this.board = document.createElement(\"main\");\n    this.board.classList.add(\"board\");\n    this.board.innerHTML = `<div class=\"column\">\n          <h2 class=\"column-header\">Todo</h2>\n          <ul class=\"task-list todo\"></ul>\n          <div class=\"column-add\">Add another card</div>\n        </div>\n        <div class=\"column\">\n          <h2 class=\"column-header\">In Progress</h2>\n          <ul class=\"task-list progress\"></ul>\n          <div class=\"column-add\">Add another card</div>\n        </div>\n        <div class=\"column\">\n          <h2 class=\"column-header\">Done</h2>\n          <ul class=\"task-list done\"></ul>\n          <div class=\"column-add\">Add another card</div>\n        </div>\n        `;\n    document.querySelector(\"body\").appendChild(this.board);\n  }\n  addInput(event) {\n    const newCardForm = document.createElement(\"form\");\n    newCardForm.classList.add(\"column-add-form\");\n    newCardForm.innerHTML = `\n        <textarea class=\"add-form-textarea\" type=\"text\" \n        placeholder=\"Enter a title for this card\"></textarea>\n        <div class=\"add-form-card\">\n          <button class=\"add-form-add-card\">Add Card</button>\n          <button class=\"add-form-close-card\"></button>\n        </div>\n        `;\n    const closestColumn = event.target.closest(\".column\");\n    event.target.replaceWith(newCardForm);\n    const add = closestColumn.querySelector(\".add-form-add-card\");\n    const close = closestColumn.querySelector(\".add-form-close-card\");\n    add.addEventListener(\"click\", this.addNewTask);\n    close.addEventListener(\"click\", this.closeForm);\n  }\n  addNewTask(event) {\n    event.preventDefault();\n    const closestColumn = event.target.closest(\".column\");\n    const parent = closestColumn.querySelector(\".task-list\");\n    const taskValue = closestColumn.querySelector(\".add-form-textarea\").value;\n    if (taskValue) {\n      new Card(parent, taskValue).addTask();\n      const columnAdd = document.createElement(\"div\");\n      columnAdd.classList.add(\"column-add\");\n      columnAdd.textContent = \"Add card\";\n      console.log(columnAdd);\n      closestColumn.removeChild(\n        closestColumn.querySelector(\".column-add-form\"),\n      );\n      closestColumn.appendChild(columnAdd);\n      columnAdd.addEventListener(\"click\", this.addInput);\n    } else {\n      alert(\"Add some text!\");\n    }\n  }\n  closeForm(event) {\n    event.preventDefault();\n    const columnAdd = document.createElement(\"div\");\n    columnAdd.classList.add(\"column-add\");\n    columnAdd.textContent = \"Add another card\";\n    const parent = event.target.closest(\".column\");\n    const child = parent.querySelector(\".column-add-form\");\n    parent.removeChild(child);\n    parent.appendChild(columnAdd);\n    columnAdd.addEventListener(\"click\", this.addInput);\n  }\n  removeTask(event) {\n    const task = event.target.closest(\".task\");\n    const parent = event.target.closest(\".task-list\");\n    parent.removeChild(task);\n  }\n}\n","import Board from \"./Board\";\n\nnew Board().init();\n","import \"./css/style.css\";\n\nimport \"./js/app\";\n\n// TODO: write your code in app.js\n"],"names":["Card","constructor","parent","value","addTask","newEl","document","createElement","classList","add","textContent","appendChild","Board","board","taskTodo","taskProgess","taskDone","tasks","addInput","bind","addNewTask","closeForm","removeTask","init","drawBoard","addList","querySelectorAll","forEach","el","addEventListener","innerHTML","querySelector","event","newCardForm","closestColumn","target","closest","replaceWith","close","preventDefault","taskValue","columnAdd","console","log","removeChild","alert","child","task"],"sourceRoot":""}